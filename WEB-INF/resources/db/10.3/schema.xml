<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
  http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

  <changeSet author="vpawar" id="Participant phone number">
    <addColumn tableName="CATISSUE_PARTICIPANT">
      <column name="PHONE_NUMBER" type="${text.type}(32)" />
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Query: Registration table with phone number">
    <addColumn tableName="OS_CPR_RECS">
      <column name="PHONE_NUMBER" type="${text.type}(32)" />
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Dimensionless container types - no. of rows is optional">
    <dropNotNullConstraint tableName="OS_CONTAINER_TYPES" columnName="NO_OF_ROWS" columnDataType="${int.type}" />
  </changeSet>

  <changeSet author="vpawar" id="Dimensionless container types - no. of columns is optional">
    <dropNotNullConstraint tableName="OS_CONTAINER_TYPES" columnName="NO_OF_COLS" columnDataType="${int.type}" />
  </changeSet>

  <changeSet author="vpawar" id="Drop not null constraint on container type name">
    <dropNotNullConstraint tableName="OS_CONTAINER_TYPES" columnName="NAME_FORMAT" columnDataType="${text.type}(255) "/>
  </changeSet>

  <changeSet author="vpawar" id="CP consents source">
    <addColumn tableName="CATISSUE_COLLECTION_PROTOCOL">
      <column name="CONSENTS_SOURCE_CP_ID" type="${int.type}">
        <constraints foreignKeyName="FK_CONSENTS_SOURCE_CP_ID"
          referencedTableName="CATISSUE_COLLECTION_PROTOCOL" referencedColumnNames="IDENTIFIER" />
      </column>
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Shipment request">
    <addColumn tableName="OS_SHIPMENTS">
      <column name="REQUEST" type="${boolean.type}" defaultValueBoolean="false">
        <constraints nullable="false" />
      </column>
      <column name="REQUESTER_ID" type="${int.type}">
        <constraints foreignKeyName="FK_SHIPMENT_REQUESTER"
          referencedTableName="CATISSUE_USER" referencedColumnNames="IDENTIFIER" />
      </column>
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Shipment request: request date">
    <addColumn tableName="OS_SHIPMENTS">
      <column name="REQUEST_DATE" type="${nullable.ts.type}" />
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Shipment request: Shipment sender is not mandatory.">
    <dropNotNullConstraint tableName="OS_SHIPMENTS" columnName="SENDER_ID" columnDataType="${int.type}" />
  </changeSet>

  <changeSet author="vpawar" id="Shipment request: Shipment date is not mandatory">
    <dropNotNullConstraint tableName="OS_SHIPMENTS" columnName="SHIPPED_DATE" columnDataType="${nullable.ts.type}" />
  </changeSet>

  <changeSet author="vpawar" id="Shipment request: requester comments">
    <addColumn tableName="OS_SHIPMENTS">
      <column name="REQUESTER_COMMENTS" type="${text.type}(255)" />
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Function based lower case index on participant UID" dbms="oracle">
    <createIndex tableName="CATISSUE_PARTICIPANT" indexName="OS_PART_LOWER_UID_IDX">
      <column name="lower(SOCIAL_SECURITY_NUMBER)" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Function based lower case index on participant eMPI" dbms="oracle">
    <createIndex tableName="CATISSUE_PARTICIPANT" indexName="OS_PART_LOWER_EMPI_IDX">
      <column name="lower(EMPI_ID)" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Function based lower case index on participant MRN" dbms="oracle">
    <createIndex tableName="CATISSUE_PART_MEDICAL_ID" indexName="OS_PMI_LOWER_MRN_IDX">
      <column name="lower(MEDICAL_RECORD_NUMBER)" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Query folder edit setting">
    <addColumn tableName="CATISSUE_QUERY_FOLDERS">
      <column name="ALLOW_EDITS_BY_SHARED_USERS" type="${boolean.type}" defaultValueBoolean="false" />
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Email and Text Opt In">
    <addColumn tableName="CATISSUE_PARTICIPANT">
      <column name="EMAIL_OPT_IN" type="${boolean.type}" defaultValueBoolean="false">
        <constraints nullable="false" />
      </column>
      <column name="TEXT_OPT_IN" type="${boolean.type}" defaultValueBoolean="false">
        <constraints nullable="false" />
      </column>
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Track participant consent to receive SMSes">
    <addColumn tableName="CATISSUE_PARTICIPANT">
      <column name="TEXT_OPT_IN_CONSENT" type="${boolean.type}" />
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Query: Registration table with email / text opt-in settings">
    <addColumn tableName="OS_CPR_RECS">
      <column name="EMAIL_OPT_IN" type="${boolean.type}" />
      <column name="TEXT_OPT_IN" type="${boolean.type}" />
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Query: Registration table with text opt-in consent settings">
    <addColumn tableName="OS_CPR_RECS">
      <column name="TEXT_OPT_IN_CONSENT" type="${boolean.type}" />
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Part 1: Trigger to keep the queries registration table updated: New Registration" dbms="mysql" runOnChange="true">
    <sql>
      drop trigger if exists os_cpr_recs_ins;
    </sql>

    <sql endDelimiter="//">
      create trigger os_cpr_recs_ins after insert on catissue_coll_prot_reg
      for each row
      begin
        insert into
          os_cpr_recs(
            cpr_id, cp_id, participant_id, first_name, middle_name, last_name,
            email_address, email_opt_in, phone_number, text_opt_in, text_opt_in_consent,
            dob, ssn, activity_status, gender_id, registration_date,
            ppid, vital_status_id, death_date, empi_id, barcode, consent_sign_date,
            consent_witness, consent_comments, consent_document_name, external_subject_id,
            site_id, creation_time, creator, update_time, updater, data_entry_status
          )
        select
          cpr.identifier as cpr_id,
          cpr.collection_protocol_id as cp_id,
          cpr.participant_id,
          p.first_name,
          p.middle_name,
          p.last_name,
          p.email_address,
          p.email_opt_in,
          p.phone_number,
          p.text_opt_in,
          p.text_opt_in_consent,
          p.birth_date as dob,
          p.social_security_number as ssn,
          cpr.activity_status,
          p.gender_id,
          cpr.registration_date,
          cpr.protocol_participant_id as ppid,
          p.vital_status_id,
          p.death_date,
          p.empi_id,
          cpr.barcode,
          cpr.consent_sign_date,
          cpr.consent_witness,
          cpr.consent_comments,
          cpr.consent_document_name,
          cpr.external_subject_id,
          cpr.site_id,
          cpr.creation_time,
          cpr.creator,
          cpr.update_time,
          cpr.updater,
          cpr.data_entry_status
        from
          catissue_coll_prot_reg cpr
          inner join catissue_participant p on p.identifier = cpr.participant_id
        where
          cpr.identifier = new.identifier;
      end;
      //
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="Part 1: Trigger to keep the queries registration table updated: New Registration" dbms="oracle" runOnChange="true">
    <sql endDelimiter="//" splitStatements="false">
      create or replace trigger os_cpr_recs_ins after insert on catissue_coll_prot_reg
      for each row
      begin
        insert into
          os_cpr_recs(
            cpr_id, cp_id, participant_id, first_name, middle_name, last_name,
            email_address, email_opt_in, phone_number, text_opt_in, text_opt_in_consent, dob, ssn, activity_status,
            gender_id, registration_date, ppid, vital_status_id, death_date, empi_id, barcode,
            consent_sign_date, consent_witness, consent_comments, consent_document_name,
            external_subject_id, site_id, creation_time, creator, update_time, updater, data_entry_status
          )
        select
          :new.identifier as cpr_id,
          :new.collection_protocol_id as cp_id,
          :new.participant_id,
          p.first_name,
          p.middle_name,
          p.last_name,
          p.email_address,
          p.email_opt_in,
          p.phone_number,
          p.text_opt_in,
          p.text_opt_in_consent,
          p.birth_date as dob,
          p.social_security_number as ssn,
          :new.activity_status,
          p.gender_id,
          :new.registration_date,
          :new.protocol_participant_id as ppid,
          p.vital_status_id,
          p.death_date,
          p.empi_id,
          :new.barcode,
          :new.consent_sign_date,
          :new.consent_witness,
          :new.consent_comments,
          :new.consent_document_name,
          :new.external_subject_id,
          :new.site_id,
          :new.creation_time,
          :new.creator,
          :new.update_time,
          :new.updater,
          :new.data_entry_status
        from
          catissue_participant p
        where
          p.identifier = :new.participant_id;
      end;
      //
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="Part 3: Trigger to keep the queries registration table updated: Update Participant" dbms="mysql" runOnChange="true">
    <sql>
      drop trigger if exists os_cpr_recs_part_update;
    </sql>

    <sql endDelimiter="//">
      create trigger os_cpr_recs_part_update after update on catissue_participant
      for each row
      begin
        update
          os_cpr_recs
        set
          first_name = new.first_name,
          middle_name = new.middle_name,
          last_name = new.last_name,
          email_address = new.email_address,
          email_opt_in = new.email_opt_in,
          phone_number = new.phone_number,
          text_opt_in = new.text_opt_in,
          text_opt_in_consent = new.text_opt_in_consent,
          dob = new.birth_date,
          ssn = new.social_security_number,
          gender_id = new.gender_id,
          vital_status_id = new.vital_status_id,
          death_date = new.death_date,
          empi_id = new.empi_id
        where
          participant_id = new.identifier;
      end;
      //
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="Part 3: Trigger to keep the queries registration table updated: Update Participant" dbms="oracle" runOnChange="true">
    <sql endDelimiter="//" splitStatements="false">
      create or replace trigger os_cpr_recs_part_update after update on catissue_participant
      for each row
      begin
        update
          os_cpr_recs
        set
          first_name = :new.first_name,
          middle_name = :new.middle_name,
          last_name = :new.last_name,
          email_address = :new.email_address,
          email_opt_in = :new.email_opt_in,
          phone_number = :new.phone_number,
          text_opt_in = :new.text_opt_in,
          text_opt_in_consent = :new.text_opt_in_consent,
          dob = :new.birth_date,
          ssn = :new.social_security_number,
          gender_id = :new.gender_id,
          vital_status_id = :new.vital_status_id,
          death_date = :new.death_date,
          empi_id = :new.empi_id
        where
          participant_id = :new.identifier;
      end;
      //
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="Automatic email opt-in for participants with pre-existing email addresses">
    <sql>
      update
        catissue_participant
      set
        email_opt_in = 1
      where
        email_address is not null and email_address != ''
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="User login OTPs">
    <createTable tableName="OS_USER_LOGIN_OTPS">
      <column name="IDENTIFIER" type="${int.type}" autoIncrement="${autoIncrement}">
        <constraints primaryKey="true" nullable="false" />
      </column>
      <column name="USER_ID" type="${int.type}">
        <constraints nullable="false" foreignKeyName="FK_LOGIN_OTP_USER"
          referencedTableName="CATISSUE_USER" referencedColumnNames="IDENTIFIER" />
      </column>
      <column name="TIME" type="${timestamp.type}">
        <constraints nullable="false" />
      </column>
      <column name="OTP" type="${text.type}(32)">
        <constraints nullable="false" />
      </column>
      <column name="IP_ADDRESS" type="${text.type}(32)">
        <constraints nullable="false" />
      </column>
    </createTable>
  </changeSet>

  <changeSet author="vpawar" id="User login OTP ID generator">
    <createSequence sequenceName="OS_USER_LOGIN_OTPS_SEQ" startValue="1" incrementBy="1" ordered="true" />
  </changeSet>

  <changeSet author="vpawar" id="Index on participant phone number">
    <createIndex tableName="CATISSUE_PARTICIPANT" indexName="OS_PARTICIPANT_PHONE_IDX">
      <column name="PHONE_NUMBER" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Index on participant email address">
    <createIndex tableName="CATISSUE_PARTICIPANT" indexName="OS_PARTICIPANT_EMAIL_ID_IDX">
      <column name="EMAIL_ADDRESS" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Participant/registration custom fields query table">
    <createTable tableName="OS_CPR_CUST_FIELDS">
      <column name="CPR_ID" type="${int.type}">
        <constraints nullable="false" />
      </column>
      <column name="FORM_ID" type="${int.type}">
        <constraints nullable="false" />
      </column>
      <column name="RECORD_ID" type="${int.type}">
        <constraints nullable="false" />
      </column>
    </createTable>
  </changeSet>

  <changeSet author="vpawar" id="Index on participant/registration custom fields query table">
    <createIndex tableName="OS_CPR_CUST_FIELDS" indexName="OS_CPR_CUST_FIELDS_IDX">
      <column name="CPR_ID" />
      <column name="FORM_ID" />
      <column name="RECORD_ID" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Trigger to insert query entity DE form record IDs" dbms="mysql" runOnChange="true">
    <sql>
      drop trigger if exists os_ins_entity_form_record_id;
    </sql>

    <sql endDelimiter="//">
      create trigger os_ins_entity_form_record_id after insert on catissue_form_record_entry
      for each row
      begin
        declare formId bigint;
        declare entityType varchar(255);

        select
          container_id, entity_type into formId, entityType
        from
          catissue_form_context
        where
          identifier = new.form_ctxt_id;

        if (entityType = 'CollectionProtocolExtension') then
          insert into os_cp_cust_fields(cp_id, form_id, record_id) values(new.object_id, formId, new.record_id);
        elseif (entityType = 'Participant') then
          insert into os_cpr_extn_recs(cpr_id, form_id, record_id) values(new.object_id, formId, new.record_id);
        elseif (entityType = 'CommonParticipant') then
          insert into os_participant_extn_recs(participant_id, form_id, record_id) values(new.object_id, formId, new.record_id);
        elseif (entityType = 'SpecimenCollectionGroup') then
          insert into os_visit_extn_recs(visit_id, form_id, record_id) values(new.object_id, formId, new.record_id);
        elseif (entityType = 'ParticipantExtension') then
          insert into os_cpr_cust_fields(cpr_id, form_id, record_id) values(new.object_id, formId, new.record_id);
        elseif (entityType = 'VisitExtension') then
          insert into os_visit_cust_fields(visit_id, form_id, record_id) values(new.object_id, formId, new.record_id);
        elseif (entityType = 'Specimen' || entityType = 'SpecimenEvent') then
          insert into os_spmn_extn_recs(specimen_id, form_id, record_id) values (new.object_id, formId, new.record_id);
        elseif (entityType = 'SpecimenExtension') then
          insert into os_spmn_cust_fields(specimen_id, form_id, record_id) values (new.object_id, formId, new.record_id);
        elseif (entityType = 'OrderExtension') then
          insert into os_order_cust_fields(order_id, form_id, record_id) values (new.object_id, formId, new.record_id);
        end if;
      end;
      //
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="Trigger to remove query entity DE form record IDs" dbms="mysql" runOnChange="true">
    <sql>
      drop trigger if exists os_del_entity_form_record_id;
    </sql>

    <sql endDelimiter="//">
      create trigger os_del_entity_form_record_id after update on catissue_form_record_entry
      for each row
      begin
        declare formId bigint;
        declare entityType varchar(255);

        if (new.activity_status = 'CLOSED') then
          select
            container_id, entity_type into formId, entityType
          from
            catissue_form_context
          where
            identifier = new.form_ctxt_id;

          if (entityType = 'CollectionProtocolExtension') then
            delete from os_cp_cust_fields where cp_id = new.object_id and form_id = formId and record_id = new.record_id;
          elseif (entityType = 'Participant') then
            delete from os_cpr_extn_recs where cpr_id = new.object_id and form_id = formId and record_id = new.record_id;
          elseif (entityType = 'CommonParticipant') then
            delete from os_participant_extn_recs where participant_id = new.object_id and form_id = formId and record_id = new.record_id;
          elseif (entityType = 'ParticipantExtension') then
            delete from os_cpr_cust_fields where participant_id = new.object_id and form_id = formId and record_id = new.record_id;
          elseif (entityType = 'SpecimenCollectionGroup') then
            delete from os_visit_extn_recs where visit_id = new.object_id and form_id = formId and record_id = new.record_id;
          elseif (entityType = 'VisitExtension') then
            delete from os_visit_cust_fields where visit_id = new.object_id and form_id = formId and record_id = new.record_id;
          elseif (entityType = 'Specimen' || entityType = 'SpecimenEvent') then
            delete from os_spmn_extn_recs where specimen_id = new.object_id and form_id = formId and record_id = new.record_id;
          elseif (entityType = 'SpecimenExtension') then
            delete from os_spmn_cust_fields where specimen_id = new.object_id and form_id = formId and record_id = new.record_id;
          elseif (entityType = 'OrderExtension') then
            delete from os_order_cust_fields where order_id = new.object_id and form_id = formId and record_id = new.record_id;
          end if;
        end if;
      end;
      //
    </sql>
  </changeSet>
</databaseChangeLog>