<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
  http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

  <changeSet author="vpawar" id="Storage site based access restriction">
    <addColumn tableName="CATISSUE_COLLECTION_PROTOCOL">
      <column name="STORE_SITE_ACCESS_RIGHTS" type="${boolean.type}" />
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Position blocked for checked-out specimen">
    <addColumn tableName="OS_CONTAINER_POSITIONS">
      <column name="CHECKOUT_SPECIMEN_ID" type="${int.type}" />
      <column name="CHECKOUT_BY" type="${int.type}" />
      <column name="CHECKOUT_TIME" type="${nullable.ts.type}" />
      <column name="CHECKOUT_COMMENTS" type="${text.type}(255)" />
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Foreign key on checked-out specimen for which the position is blocked">
    <addForeignKeyConstraint constraintName="FK_POS_CHECKED_OUT_SPMN_ID"
      baseTableName="OS_CONTAINER_POSITIONS" baseColumnNames="CHECKOUT_SPECIMEN_ID"
      referencedTableName="CATISSUE_SPECIMEN" referencedColumnNames="IDENTIFIER" />
  </changeSet>

  <changeSet author="vpawar" id="Unique constraint on checked-out specimen" dbms="mysql">
    <createIndex indexName="OS_POS_CHECKED_OUT_SPMN_UQ" tableName="OS_CONTAINER_POSITIONS" unique="true">
      <column name="CHECKOUT_SPECIMEN_ID" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Index on checked-out specimen" dbms="oracle">
    <createIndex tableName="OS_CONTAINER_POSITIONS" indexName="OS_POS_CHECKED_OUT_SPMN_IDX">
      <column name="CHECKOUT_SPECIMEN_ID" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Transfer event storage status - checked-in or checked-out">
    <addColumn tableName="CATISSUE_TRANSFER_EVENT_PARAM">
      <column name="STORAGE_STATUS" type="${text.type}(255)" />
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Order setting to indicate whether to checkout the specimens or not">
    <addColumn tableName="OS_ORDERS">
      <column name="CHECKOUT_SPECIMENS" type="${boolean.type}" />
    </addColumn>
  </changeSet>

  <changeSet author="vpawar" id="Not all exceptions are generated in an authenticated context">
    <dropNotNullConstraint tableName="OS_UNHANDLED_EXCEPTIONS" columnName="USER_ID" columnDataType="${int.type}" />
  </changeSet>

  <changeSet author="vpawar" id="Participant registrations query table">
    <createTable tableName="OS_CPR_RECS">
      <column name="CPR_ID" type="${int.type}">
        <constraints primaryKey="true" nullable="false" />
      </column>
      <column name="CP_ID" type="${int.type}">
        <constraints nullable="false" foreignKeyName="FK_QUERY_CPR_RECS_CP_ID"
          referencedTableName="CATISSUE_COLLECTION_PROTOCOL" referencedColumnNames="IDENTIFIER" />
      </column>
      <column name="PARTICIPANT_ID" type="${int.type}">
        <constraints foreignKeyName="FK_QUERY_CPR_RECS_PART_ID"
          referencedTableName="CATISSUE_PARTICIPANT" referencedColumnNames="IDENTIFIER" />
      </column>
      <column name="FIRST_NAME" type="${text.type}(255)" />
      <column name="MIDDLE_NAME" type="${text.type}(255)" />
      <column name="LAST_NAME" type="${text.type}(255)" />
      <column name="EMAIL_ADDRESS" type="${text.type}(255)" />
      <column name="DOB" type="${date.type}" />
      <column name="SSN" type="${text.type}(255)" />
      <column name="ACTIVITY_STATUS" type="${text.type}(32)" />
      <column name="GENDER_ID" type="${int.type}">
        <constraints foreignKeyName="FK_QUERY_CPR_RECS_GENDER"
          referencedTableName="CATISSUE_PERMISSIBLE_VALUE" referencedColumnNames="IDENTIFIER" />
      </column>
      <column name="REGISTRATION_DATE" type="${date.type}">
        <constraints nullable="false" />
      </column>
      <column name="PPID" type="${text.type}(255)">
        <constraints nullable="false" />
      </column>
      <column name="VITAL_STATUS_ID" type="${int.type}">
        <constraints foreignKeyName="FK_QUERY_CPR_RECS_VSTATUS"
          referencedTableName="CATISSUE_PERMISSIBLE_VALUE" referencedColumnNames="IDENTIFIER" />
      </column>
      <column name="DEATH_DATE" type="${date.type}" />
      <column name="EMPI_ID" type="${text.type}(64)" />
      <column name="BARCODE" type="${text.type}(255)" />
      <column name="CONSENT_SIGN_DATE" type="${nullable.ts.type}" />
      <column name="CONSENT_WITNESS" type="${int.type}">
        <constraints foreignKeyName="FK_QUERY_CPR_RECS_WITNESS"
          referencedTableName="CATISSUE_USER" referencedColumnNames="IDENTIFIER" />
      </column>
      <column name="CONSENT_COMMENTS" type="${text.type}(1024)" />
      <column name="CONSENT_DOCUMENT_NAME" type="${text.type}(255)" />
      <column name="EXTERNAL_SUBJECT_ID" type="${text.type}(128)" />
      <column name="SITE_ID" type="${int.type}">
        <constraints foreignKeyName="FK_QUERY_CPR_RECS_SITE"
          referencedTableName="CATISSUE_SITE" referencedColumnNames="IDENTIFIER" />
      </column>
      <column name="CREATION_TIME" type="${nullable.ts.type}" />
      <column name="CREATOR" type="${int.type}">
        <constraints foreignKeyName="FK_QUERY_CPR_RECS_CREATOR"
          referencedTableName="CATISSUE_USER" referencedColumnNames="IDENTIFIER" />
      </column>
      <column name="UPDATE_TIME" type="${nullable.ts.type}" />
      <column name="UPDATER" type="${int.type}">
        <constraints foreignKeyName="FK_QUERY_CPR_RECS_UPDATER"
          referencedTableName="CATISSUE_USER" referencedColumnNames="IDENTIFIER" />
      </column>
    </createTable>
  </changeSet>

  <changeSet author="vpawar" id="Populate the query registration records table with the present registrations data">
    <preConditions onFail="MARK_RAN">
      <sqlCheck expectedResult="0">
        select count(*) from os_cpr_recs
      </sqlCheck>
    </preConditions>
    <sql>
      insert into
        os_cpr_recs (
          cpr_id, cp_id, participant_id, first_name, middle_name, last_name,
          email_address, dob, ssn, activity_status, gender_id, registration_date,
          ppid, vital_status_id, death_date, empi_id, barcode, consent_sign_date,
          consent_witness, consent_comments, consent_document_name, external_subject_id,
          site_id, creation_time, creator, update_time, updater
        )
      select
        cpr.identifier as cpr_id, cpr.collection_protocol_id as cp_id,
        cpr.participant_id as participant_id, p.first_name as first_name,
        p.middle_name as middle_name, p.last_name as last_name,
        p.email_address as email_address, p.birth_date as dob, p.social_security_number as ssn,
        cpr.activity_status as activity_status, p.gender_id as gender_id,
        cpr.registration_date as registration_date, cpr.protocol_participant_id as ppid,
        p.vital_status_id as vital_status_id, p.death_date as death_date,
        p.empi_id as empi_id, cpr.barcode as barcode,
        cpr.consent_sign_date as consent_sign_date, cpr.consent_witness as consent_witness,
        cpr.consent_comments as consent_comments,
        substr(cpr.consent_document_name, instr(cpr.consent_document_name, '_') + 1) as consent_document_name,
        cpr.external_subject_id as external_subject_id, cpr.site_id as site_id,
        cpr.creation_time as creation_time, cpr.creator as creator,
        case
          when cpr.update_time is null then p.update_time
          when p.update_time is null then cpr.update_time
          when cpr.update_time &lt; p.update_time then p.update_time
          else cpr.update_time
        end as update_time,
        case
          when cpr.update_time is null then p.updater
          when p.update_time is null then cpr.updater
          when cpr.update_time &lt; p.update_time then p.updater
          else cpr.updater
        end as updater
      from
        catissue_coll_prot_reg cpr
        inner join catissue_participant p on cpr.participant_id = p.identifier
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="Enable faster lookups on PPID">
    <createIndex tableName="OS_CPR_RECS" indexName="OS_CPR_RECS_PPID_IDX">
      <column name="PPID" type="${text.type}(255)" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Enable faster lookups on eMPI">
    <createIndex tableName="OS_CPR_RECS" indexName="OS_CPR_RECS_EMPI_IDX">
      <column name="EMPI_ID" type="${text.type}(64)" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Query table: Index on registration CP" dbms="oracle">
    <createIndex tableName="OS_CPR_RECS" indexName="OS_CPR_RECS_CP_IDX">
      <column name="CP_ID" type="${int.type}" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Query table: Index on registration participant ID" dbms="oracle">
    <createIndex tableName="OS_CPR_RECS" indexName="OS_CPR_RECS_PART_IDX">
      <column name="PARTICIPANT_ID" type="${int.type}" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Query table: Index on registration gender" dbms="oracle">
    <createIndex tableName="OS_CPR_RECS" indexName="OS_CPR_RECS_GENDER_IDX">
      <column name="GENDER_ID" type="${int.type}" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Query table: Index on registration vital status" dbms="oracle">
    <createIndex tableName="OS_CPR_RECS" indexName="OS_CPR_RECS_VSTATUS_IDX">
      <column name="VITAL_STATUS_ID" type="${int.type}" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Query table: Index on registration site" dbms="oracle">
    <createIndex tableName="OS_CPR_RECS" indexName="OS_CPR_RECS_SITE_IDX">
      <column name="SITE_ID" type="${int.type}" />
    </createIndex>
  </changeSet>

  <changeSet author="vpawar" id="Part 1: Trigger to keep the queries registration table updated: New Registration" dbms="mysql" runOnChange="true">
    <sql>
      drop trigger if exists os_cpr_recs_ins;
    </sql>

    <sql endDelimiter="//">
      create trigger os_cpr_recs_ins after insert on catissue_coll_prot_reg
      for each row
      begin
        insert into
          os_cpr_recs(
            cpr_id, cp_id, participant_id, first_name, middle_name, last_name,
            email_address, dob, ssn, activity_status, gender_id, registration_date,
            ppid, vital_status_id, death_date, empi_id, barcode, consent_sign_date,
            consent_witness, consent_comments, consent_document_name, external_subject_id,
            site_id, creation_time, creator, update_time, updater
          )
        select
          cpr.identifier as cpr_id,
          cpr.collection_protocol_id as cp_id,
          cpr.participant_id,
          p.first_name,
          p.middle_name,
          p.last_name,
          p.email_address,
          p.birth_date as dob,
          p.social_security_number as ssn,
          cpr.activity_status,
          p.gender_id,
          cpr.registration_date,
          cpr.protocol_participant_id as ppid,
          p.vital_status_id,
          p.death_date,
          p.empi_id,
          cpr.barcode,
          cpr.consent_sign_date,
          cpr.consent_witness,
          cpr.consent_comments,
          cpr.consent_document_name,
          cpr.external_subject_id,
          cpr.site_id,
          cpr.creation_time,
          cpr.creator,
          cpr.update_time,
          cpr.updater
        from
          catissue_coll_prot_reg cpr
          inner join catissue_participant p on p.identifier = cpr.participant_id
        where
          cpr.identifier = new.identifier;
      end;
      //
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="Part 1: Trigger to keep the queries registration table updated: New Registration" dbms="oracle" runOnChange="true">
    <sql endDelimiter="//" splitStatements="false">
      create or replace trigger os_cpr_recs_ins after insert on catissue_coll_prot_reg
      for each row
      begin
        insert into
          os_cpr_recs(
            cpr_id, cp_id, participant_id, first_name, middle_name, last_name,
            email_address, dob, ssn, activity_status, gender_id, registration_date,
            ppid, vital_status_id, death_date, empi_id, barcode, consent_sign_date,
            consent_witness, consent_comments, consent_document_name, external_subject_id,
            site_id, creation_time, creator, update_time, updater
          )
        select
          :new.identifier as cpr_id,
          :new.collection_protocol_id as cp_id,
          :new.participant_id,
          p.first_name,
          p.middle_name,
          p.last_name,
          p.email_address,
          p.birth_date as dob,
          p.social_security_number as ssn,
          :new.activity_status,
          p.gender_id,
          :new.registration_date,
          :new.protocol_participant_id as ppid,
          p.vital_status_id,
          p.death_date,
          p.empi_id,
          :new.barcode,
          :new.consent_sign_date,
          :new.consent_witness,
          :new.consent_comments,
          :new.consent_document_name,
          :new.external_subject_id,
          :new.site_id,
          :new.creation_time,
          :new.creator,
          :new.update_time,
          :new.updater
        from
          catissue_participant p
        where
          p.identifier = :new.participant_id;
      end;
      //
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="Part 2: Trigger to keep the queries registration table updated: Update Registration" dbms="mysql" runOnChange="true">
    <sql>
      drop trigger if exists os_cpr_recs_cpr_update;
    </sql>

    <sql endDelimiter="//">
      create trigger os_cpr_recs_cpr_update after update on catissue_coll_prot_reg
      for each row
      begin
        update
          os_cpr_recs
        set
          cp_id = new.collection_protocol_id,
          participant_id = new.participant_id,
          activity_status = new.activity_status,
          registration_date = new.registration_date,
          ppid = new.protocol_participant_id,
          barcode = new.barcode,
          consent_sign_date = new.consent_sign_date,
          consent_witness = new.consent_witness,
          consent_comments = new.consent_comments,
          consent_document_name = new.consent_document_name,
          external_subject_id = new.external_subject_id,
          site_id = new.site_id,
          creation_time = new.creation_time,
          creator = new.creator,
          update_time = new.update_time,
          updater = new.updater
        where
          cpr_id = new.identifier;

        if (new.participant_id != old.participant_id) then
          update
            os_cpr_recs cpr
            inner join catissue_participant p on p.identifier = cpr.participant_id
          set
            cpr.first_name = p.first_name,
            cpr.middle_name = p.middle_name,
            cpr.last_name = p.last_name,
            cpr.email_address = p.email_address,
            cpr.dob = p.birth_date,
            cpr.ssn = p.social_security_number,
            cpr.gender_id = p.gender_id,
            cpr.vital_status_id = p.vital_status_id,
            cpr.death_date = p.death_date,
            cpr.empi_id = p.empi_id
          where
            cpr.cpr_id = new.identifier;
        end if;
      end;
      //
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="Part 2: Trigger to keep the queries registration table updated: Update Registration" dbms="oracle" runOnChange="true">
    <sql endDelimiter="//" splitStatements="false">
      create or replace trigger os_cpr_recs_cpr_update after update on catissue_coll_prot_reg
      for each row
      begin
        update
          os_cpr_recs
        set
          cp_id = :new.collection_protocol_id,
          participant_id = :new.participant_id,
          activity_status = :new.activity_status,
          registration_date = :new.registration_date,
          ppid = :new.protocol_participant_id,
          barcode = :new.barcode,
          consent_sign_date = :new.consent_sign_date,
          consent_witness = :new.consent_witness,
          consent_comments = :new.consent_comments,
          consent_document_name = :new.consent_document_name,
          external_subject_id = :new.external_subject_id,
          site_id = :new.site_id,
          creation_time = :new.creation_time,
          creator = :new.creator,
          update_time = :new.update_time,
          updater = :new.updater
        where
          cpr_id = :new.identifier;

        if (:new.participant_id != :old.participant_id) then
          merge into
            os_cpr_recs cpr
          using
            catissue_participant p on (p.identifier = cpr.participant_id)
          when matched then
            update set
              cpr.first_name = p.first_name,
              cpr.middle_name = p.middle_name,
              cpr.last_name = p.last_name,
              cpr.email_address = p.email_address,
              cpr.dob = p.birth_date,
              cpr.ssn = p.social_security_number,
              cpr.gender_id = p.gender_id,
              cpr.vital_status_id = p.vital_status_id,
              cpr.death_date = p.death_date,
              cpr.empi_id = p.empi_id
            where
              cpr.cpr_id = :new.identifier;
        end if;
      end;
      //
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="Part 3: Trigger to keep the queries registration table updated: Update Participant" dbms="mysql" runOnChange="true">
    <sql>
      drop trigger if exists os_cpr_recs_part_update;
    </sql>

    <sql endDelimiter="//">
      create trigger os_cpr_recs_part_update after update on catissue_participant
      for each row
      begin
        update
          os_cpr_recs
        set
          first_name = new.first_name,
          middle_name = new.middle_name,
          last_name = new.last_name,
          email_address = new.email_address,
          dob = new.birth_date,
          ssn = new.social_security_number,
          gender_id = new.gender_id,
          vital_status_id = new.vital_status_id,
          death_date = new.death_date,
          empi_id = new.empi_id
        where
          participant_id = new.identifier;
      end;
      //
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="Part 3: Trigger to keep the queries registration table updated: Update Participant" dbms="oracle" runOnChange="true">
    <sql endDelimiter="//" splitStatements="false">
      create or replace trigger os_cpr_recs_part_update after update on catissue_participant
      for each row
      begin
        update
          os_cpr_recs
        set
          first_name = :new.first_name,
          middle_name = :new.middle_name,
          last_name = :new.last_name,
          email_address = :new.email_address,
          dob = :new.birth_date,
          ssn = :new.social_security_number,
          gender_id = :new.gender_id,
          vital_status_id = :new.vital_status_id,
          death_date = :new.death_date,
          empi_id = :new.empi_id
        where
          participant_id = :new.identifier;
      end;
      //
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="Part 4: Trigger to keep the queries registration table updated: Delete Registration" dbms="mysql" runOnChange="true">
    <sql>
      drop trigger if exists os_cpr_recs_del;
    </sql>

    <sql endDelimiter="//">
      create trigger os_cpr_recs_del after delete on catissue_coll_prot_reg
      for each row
      begin
        delete from os_cpr_recs where cpr_id = old.identifier;
      end;
      //
    </sql>
  </changeSet>

  <changeSet author="vpawar" id="Part 4: Trigger to keep the queries registration table updated: Delete Registration" dbms="oracle" runOnChange="true">
    <sql endDelimiter="//" splitStatements="false">
      create or replace trigger os_cpr_recs_del after delete on catissue_coll_prot_reg
      for each row
      begin
        delete from os_cpr_recs where cpr_id = :old.identifier;
      end;
      //
    </sql>
  </changeSet>
</databaseChangeLog>
